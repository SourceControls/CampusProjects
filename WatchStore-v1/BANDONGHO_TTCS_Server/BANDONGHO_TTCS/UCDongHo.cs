using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace BANDONGHO_TTCS
{
    public partial class UCDongHo : DevExpress.XtraEditors.XtraUserControl
    {
        private bool addingNew = false;
        private static UCDongHo _instance;

        public static UCDongHo Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new UCDongHo();
                }
                return _instance;
            }
        }
        public UCDongHo()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard


        }
        private void UCDongHo_Load(object sender, EventArgs e)
        {
            dONGHOTableAdapter.Fill(dSet.DONGHO);
            lOAIDONGHOTableAdapter.Fill(dSet.LOAIDONGHO);
            hANGDONGHOTableAdapter.Fill(dSet.HANGDONGHO);
            cT_PDTableAdapter.Fill(dSet.CT_PD);
            cT_PNTableAdapter.Fill(dSet.CT_PN);
            cT_KMTableAdapter.Fill(dSet.CT_KM);
            cT_GIOHANGTableAdapter.Fill(dSet.CT_GIOHANG);
            cbHang.DataSource = bdsHang;
            cbHang.DisplayMember = "TENHANG";
            cbHang.ValueMember = "MAHANG";
            cbLoai.DataSource = bdsLoai;
            cbLoai.DisplayMember = "TENLOAI";
            cbLoai.ValueMember = "MALOAI";
        }
        private void startEdit(bool addNew)
        {
            btnSua.Enabled =
            btnLoad.Enabled = dONGHOGridControl.Enabled =
            btnThem.Enabled = btnXoa.Enabled = false;
            panelInput.Enabled = btnUndo.Enabled = btnLuu.Enabled  = true;
            if (addNew)
            {
                bdsDongHo.AddNew();
                addingNew = txtMaDH.Enabled = true;
                cbLoai.SelectedIndex = 0;
                cbHang.SelectedIndex = 0;
                txtMaLoai.Text = cbLoai.SelectedValue.ToString();
                txtMaHang.Text = cbHang.SelectedValue.ToString();
                String defaultImgPath = @"..\..\Resource\Watch_Img\default.png";
                if (PBHinhAnh.Image != null)
                    PBHinhAnh.Image.Dispose();
                PBHinhAnh.Image = new Bitmap(defaultImgPath);
                txtHinhAnh.Text = defaultImgPath;
            }
            else
            {
                addingNew = txtMaDH.Enabled =false;
                
            }
        }
        private void doneEdit()
        {
            btnSua.Enabled =
            btnLoad.Enabled = dONGHOGridControl.Enabled =
            btnThem.Enabled = btnXoa.Enabled =true;
            panelInput.Enabled = btnUndo.Enabled = btnLuu.Enabled = false;
            if (addingNew)
            {
                addingNew = false;

            }
        }
        private void giaDuLieu()
        {
            txtMaDH.Text = "TESTDH" + (bdsDongHo.Count - 1).ToString();
            txtTenDongHo.Text = "Casio AE";
            txtGia.Text = "1299000";
            txtSoLuongTon.Value = 0;
        }
        private void dONGHOBindingNavigatorSaveItem_Click(object sender, EventArgs e)
        {
            this.Validate();
            this.bdsDongHo.EndEdit();
            this.tableAdapterManager.UpdateAll(this.dSet);

        }


        private void btnThem_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if(bdsHang.Count == 0)
            {
                MessageBox.Show("Không có hãng đồng hồ, không thể thêm đồng hồ!");
                return;
            }
            if (bdsLoai.Count == 0)
            {
                MessageBox.Show("Không có loại đồng hồ, không thể thêm đồng hồ!");
                return;
            }

            startEdit(true);
            giaDuLieu();
        }

        private void btnSua_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            if (bdsDongHo.Count == 0)
            {
                MessageBox.Show("Không có dữ liệu để sửa!");
                return;
            }
            startEdit(false);
        }

        private void btnLuu_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            //check ràng buộc
            string maDH = txtMaDH.Text.ToString().Trim();
            string ten = txtTenDongHo.Text.ToString().Trim();
            string gia  = txtGia.Text.ToString().Trim();
            if (maDH.Length == 0)
            {
                MessageBox.Show("Không được để trống mã đồng hồ");
                return;
            }
            if (ten.Length == 0)
            {
                MessageBox.Show("Không được để trống tên đồng hồ");
                return;
            }
            if (gia.Length == 0)
            {
                MessageBox.Show("Không được để trống giá");
                return;
            }
            if (bdsDongHo.Find("MADONGHO", maDH) != -1 & bdsDongHo.Find("MADONGHO", maDH) != bdsDongHo.Position)
            {
                MessageBox.Show("Mã đồng hồ không được trùng!");
                return;
            }
            String newPath = @"..\..\Resource\Watch_Img\" + txtMaDH.Text.Trim() + ".png";
            String oldPath = txtHinhAnh.Text;
            //bắt đầu lưu
            try
            {
                bdsDongHo.EndEdit();
                dONGHOTableAdapter.Update(dSet.DONGHO);
                bdsDongHo.ResetCurrentItem();
                if (txtHinhAnh.Text.ToString().Contains(':'))
                {
                    txtHinhAnh.Text = newPath;
                    if (File.Exists(newPath))
                        File.Delete(newPath);
                    File.Copy(oldPath, newPath);
                }

              
                MessageBox.Show("Lưu thành công!");

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {
                doneEdit();
            }
        }

        private void btnUndo_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            bdsDongHo.CancelEdit();
            doneEdit();
        }

        private void btnLoad_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            dONGHOTableAdapter.Fill(dSet.DONGHO);
        }

        private void barButtonItem1_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            String maDH = ""; 
            if(bdsDongHo.Count == 0)
            {
                MessageBox.Show("Không có dữ liệu để xóa");
                return;
            }
            if (bdsCTKM.Count > 0)
            {
                MessageBox.Show("Đồng hồ đang nằm trong đợt khuyến mãi, không thể xóa!");
                return;
            }
            if (bdsCTPD.Count > 0)
            {
                MessageBox.Show("Đồng hồ đã có trong phiếu đặt, không thể xóa!");
                return;
            }
            if (bdsCTPN.Count > 0)
            {
                MessageBox.Show("Đồng hồ đã có trong phiếu nhập, không thể xóa!");
                return;
            }
            if (bdsCTGH.Count > 0)
            {
                MessageBox.Show("Đồng hồ đã được khách thêm vào giỏ hàng, không thể xóa!");
                return;
            }
            if (MessageBox.Show("Xác nhận xóa đồng hồ?", "Xác Nhận", MessageBoxButtons.OKCancel) == DialogResult.OK)
            {
                try
                {
                    maDH = ((DataRowView)bdsDongHo[bdsDongHo.Position])["MADONGHO"].ToString();
                    bdsDongHo.RemoveCurrent();
                    dONGHOTableAdapter.Update(dSet.DONGHO);
                    MessageBox.Show("Xóa đồng hồ thành công!");
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Lỗi Xóa Đồng Hồ" + ex.ToString());
                    dONGHOTableAdapter.Fill(dSet.DONGHO);
                    bdsDongHo.Position = bdsDongHo.Find("MADH", maDH);
                    return;
                }
            }

        }


        private void cbHang_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cbHang.SelectedValue == null || cbHang.SelectedValue.ToString().Equals("System.Data.DataRowView"))
            {
                return;
            }
            try
            {
                txtMaHang.Text = cbHang.SelectedValue.ToString();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void cbLoai_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cbLoai.SelectedValue == null || cbLoai.SelectedValue.ToString().Equals("System.Data.DataRowView"))
            {
                return;
            }
            try
            {
                txtMaLoai.Text = cbLoai.SelectedValue.ToString();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void txtMaHang_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                cbHang.SelectedValue = txtMaHang.Text;

            }
            catch
            {

            }

        }

        private void txtMaLoai_EditValueChanged(object sender, EventArgs e)
        {
            try
            {
                cbLoai.SelectedValue = txtMaLoai.Text;

            }
            catch
            {

            }
        }

        private void dONGHOGridControl_Click(object sender, EventArgs e)
        {

        }

        private void gridView1_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            if (txtHinhAnh.Text.Length == 0)
                return;
            try
            {

                PBHinhAnh.Image = Image.FromFile(txtHinhAnh.Text);
            }
            catch (IOException ex)
            {
                MessageBox.Show("Không thể tải hình ảnh!\n" + ex.Message);

            }
            PBHinhAnh.SizeMode = PictureBoxSizeMode.StretchImage;
        }

        private void hINHANHLabel_Click(object sender, EventArgs e)
        {

        }

        private void hINHANHTextBox_TextChanged(object sender, EventArgs e)
        {

        }

        private void btnChonAnh_Click(object sender, EventArgs e)
        {
            OpenFileDialog open = new OpenFileDialog();
            open.Filter = "Image Files(*.jpg; *.jpeg; *.gif; *.bmp; *.png)|*.jpg; *.jpeg; *.gif; *.bmp;*.png";
            if (open.ShowDialog() == DialogResult.OK)
            {
                if(PBHinhAnh.Image!= null)
                PBHinhAnh.Image.Dispose();
                PBHinhAnh.Image = new Bitmap(open.FileName);
                txtHinhAnh.Text = open.FileName;
            }
        
        }
    }
}
